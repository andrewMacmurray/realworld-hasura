-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Scalar exposing (Codecs, Id(..), Json(..), Timestamptz(..), Uuid(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type Json
    = Json String


type Timestamptz
    = Timestamptz String


type Uuid
    = Uuid String


defineCodecs :
    { codecId : Codec valueId
    , codecJson : Codec valueJson
    , codecTimestamptz : Codec valueTimestamptz
    , codecUuid : Codec valueUuid
    }
    -> Codecs valueId valueJson valueTimestamptz valueUuid
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueJson valueTimestamptz valueUuid
    ->
        { codecId : Codec valueId
        , codecJson : Codec valueJson
        , codecTimestamptz : Codec valueTimestamptz
        , codecUuid : Codec valueUuid
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueJson valueTimestamptz valueUuid
    = Codecs (RawCodecs valueId valueJson valueTimestamptz valueUuid)


type alias RawCodecs valueId valueJson valueTimestamptz valueUuid =
    { codecId : Codec valueId
    , codecJson : Codec valueJson
    , codecTimestamptz : Codec valueTimestamptz
    , codecUuid : Codec valueUuid
    }


defaultCodecs : RawCodecs Id Json Timestamptz Uuid
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecJson =
        { encoder = \(Json raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Json
        }
    , codecTimestamptz =
        { encoder = \(Timestamptz raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Timestamptz
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    }
