-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Object.Profile exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.Enum.Follows_select_column
import Hasura.InputObject
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.ScalarCodecs
import Hasura.Union
import Json.Decode as Decode


bio : SelectionSet (Maybe String) Hasura.Object.Profile
bio =
    Object.selectionForField "(Maybe String)" "bio" [] (Decode.string |> Decode.nullable)


email : SelectionSet (Maybe String) Hasura.Object.Profile
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


type alias FollowsOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Follows_select_column.Follows_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Follows_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Follows_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
follows : (FollowsOptionalArguments -> FollowsOptionalArguments) -> SelectionSet decodesTo Hasura.Object.Follows -> SelectionSet (List decodesTo) Hasura.Object.Profile
follows fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Hasura.Enum.Follows_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Hasura.InputObject.encodeFollows_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Hasura.InputObject.encodeFollows_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "follows" optionalArgs object_ (identity >> Decode.list)


profile_image : SelectionSet (Maybe String) Hasura.Object.Profile
profile_image =
    Object.selectionForField "(Maybe String)" "profile_image" [] (Decode.string |> Decode.nullable)


user_id : SelectionSet (Maybe Int) Hasura.Object.Profile
user_id =
    Object.selectionForField "(Maybe Int)" "user_id" [] (Decode.int |> Decode.nullable)


username : SelectionSet (Maybe String) Hasura.Object.Profile
username =
    Object.selectionForField "(Maybe String)" "username" [] (Decode.string |> Decode.nullable)
