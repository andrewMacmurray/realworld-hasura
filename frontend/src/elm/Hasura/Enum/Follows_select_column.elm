-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Enum.Follows_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "follows"

  - Following\_id - column name

-}
type Follows_select_column
    = Following_id


list : List Follows_select_column
list =
    [ Following_id ]


decoder : Decoder Follows_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "following_id" ->
                        Decode.succeed Following_id

                    _ ->
                        Decode.fail ("Invalid Follows_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Follows_select_column -> String
toString enum =
    case enum of
        Following_id ->
            "following_id"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Follows_select_column
fromString enumString =
    case enumString of
        "following_id" ->
            Just Following_id

        _ ->
            Nothing
